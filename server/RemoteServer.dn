uses Constants

const char debugMSG[] = "[@RemoteServer]"

component provides server.RemoteServer requires net.TCPSocket, net.TCPServerSocket, io.Output out,
    data.IntUtil iu,  data.json.JSONEncoder je, data.StringUtil su, rpc.RPCUtil rpc, matmul.Matmul mat {
    bool serviceStatus = false
    TCPServerSocket host
    
    void RemoteServer:start(int PORT) {
        host = new TCPServerSocket()
        serviceStatus = true
        
        if (!host.bind(TCPServerSocket.ANY_ADDRESS, PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}

        out.println("$debugMSG - Server started on port $(iu.makeString(PORT))")

        while (serviceStatus) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) { asynch::handleRequest(client) }
		}
    }

    void RemoteServer:handleRequest(TCPSocket s) {
        char requestContent[] = rpc.receiveData(s)
        if(requestContent == null) s.disconnect()
        // out.println("$debugMSG - content - $requestContent")
        Request req = rpc.parseRequestFromString(requestContent)
        Response res = process(req)
        char rawResponse[] = rpc.buildRawResponse(res)
        // out.println("$debugMSG - response - $rawResponse")
        s.send(rawResponse)
        s.disconnect()
    }

    Response process(Request req) {
        char method[] = getMethodFromMetadata(req.meta)
        if(method == "multiply") {
            MultiplyParamsFormat matrixData = je.jsonToData(req.content, typeof(MultiplyParamsFormat))
            Matrix result = mat.multiply(mat.charToMatrix(matrixData.A), mat.charToMatrix(matrixData.B))
            return buildResponseWithData(mat.matrixToChar(result), "Matrix", "multiply", "200")
        }

        if(method == "calcLine") {
            CalcLineParamsFormat matrixData = je.jsonToData(req.content, typeof(CalcLineParamsFormat))
            Line result = mat.calcLine(mat.charToLine(matrixData.line), mat.charToMatrix(matrixData.B))
            return buildResponseWithData(mat.lineToChar(result.line), "Line", "calcLine", "200")
        }

        return buildResponseWithoutData(method, "404")
    }

    char[] getMethodFromMetadata(Metadata meta[]) {
        for(int i =0; i < meta.arrayLength; i++) {
            if(meta[i].name == "method") return meta[i].value
        }

        return ""
    }

    Response buildResponseWithData(char content[], char dataType[], char method[], char status[]) {
        return new Response(buildMetaForMethod(method, status, dataType), content)
    }

    Response buildResponseWithoutData(char method[], char status[]) {
        return new Response(buildMetaForMethod(method, status))
    }

    Metadata[] buildMetaForMethod(char method[], char status[], opt char dataType[]) {
        Metadata metaMethod = new Metadata("method", method)
        Metadata transactionStatus = new Metadata("status", status)
        if(isset dataType) {
            Metadata metaDataType = new Metadata("data-type", dataType)
            return new Metadata[](metaMethod, metaDataType, transactionStatus)
        }
        return new Metadata[](metaMethod, transactionStatus)
    }
}