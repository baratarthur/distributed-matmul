
component provides repositories.ListRepository(AdaptEvents) requires rpc.RPCUtil connection, data.IntUtil iu, data.json.JSONEncoder je {
	Address remotes[] = new Address[](new Address("localhost", 8081))
	int addressPointer = 0
	Mutex pointerLock = new Mutex()

	void ListRepository:add(store Node node) {
		char requestBody[] = je.jsonFromData(node)
		Request req = new Request(buildMetaForMethod("add"), requestBody)
		broadcastWrite(req)
	}

	Node[] ListRepository:getAll() {
		Request req = new Request(buildMetaForMethod("getAll"))
		Response res = broadcastRead(req)
		return je.jsonToArray(res.content, typeof(Node[]))
	}

	void ListRepository:clear() {
		Request req = new Request(buildMetaForMethod("clear"))
		broadcastWrite(req)
	}

	int ListRepository:size() {
		Request req = new Request(buildMetaForMethod("size"))
		Response res = broadcastRead(req)
		return iu.intFromString(res.content)
	}

	Metadata[] buildMetaForMethod(char method[]) {
		Metadata metaMethod = new Metadata("method", method)
		return new Metadata[](metaMethod)
	}

	void broadcastWrite(Request r) {
		for(int i = 0; i < remotes.arrayLength; i++) {
			connection.connect(remotes[i])
			connection.make(r)
		}
	}

	Response broadcastRead(Request r) {
		connection.connect(remotes[0])
		return connection.make(r)
	}

	void AdaptEvents:active() {
		for(int i=0;i<list.arrayLength;i++) {
			add(list[i])
		}
	}

	void AdaptEvents:inactive() {
		list = getAll()
		index = size()
		clear()
	}
}
